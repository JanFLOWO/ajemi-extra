use std::collections::HashMap;
use super::Candidate;
use super::Candidate::*;

pub struct Schema {
    pub candis: HashMap<String, Candidate>,
    pub puncts: HashMap<char, char>
}

fn build_candis(entries: Vec<(&str, &str)>) -> HashMap<String, Candidate> {
    let mut candi = HashMap::new();
    for (spelling, word) in entries {
        // store exact spellings -> words
        candi.insert(spelling.to_string(), Exact(word.to_string(), Vec::new()));
        // store prefixes -> words
        for len in 1..spelling.len() {
            let prefix = &spelling[0..len];
            match candi.get_mut(prefix) {
                None => {
                    candi.insert(prefix.to_string(), Unique(word.to_string()));
                },
                Some(Unique(unique)) => {
                    let mut duplicates = Vec::new();
                    duplicates.push(unique.clone());
                    duplicates.push(word.to_string());
                    candi.insert(prefix.to_string(), Duplicates(duplicates));
                },
                Some(Duplicates(duplicates)) | Some(Exact(_, duplicates)) => {
                    duplicates.push(word.to_string());
                }
            }
        }
    }
    candi
}


pub fn sitelen() -> Schema {
    let candis = build_candis(vec![
        ("a", "Û±§Ä"),      
        ("akesi", "Û±§Å"),  
        ("ala", "Û±§Ç"),    
        ("alasa", "Û±§É"),  
        ("ale", "Û±§Ñ"),    
        ("anpa", "Û±§Ö"),   
        ("ante", "Û±§Ü"),   
        ("anu", "Û±§á"),    
        ("awen", "Û±§à"),   
        ("e", "Û±§â"),      
        ("en", "Û±§ä"),     
        ("esun", "Û±§ã"),   
        ("ijo", "Û±§å"),    
        ("ike", "Û±§ç"),    
        ("ilo", "Û±§é"),    
        ("insa", "Û±§è"),   
        ("jaki", "Û±§ê"),   
        ("jan", "Û±§ë"),    
        ("jelo", "Û±§í"),   
        ("jo", "Û±§ì"),     
        ("kala", "Û±§î"),   
        ("kalama", "Û±§ï"), 
        ("kama", "Û±§ñ"),   
        ("kasi", "Û±§ó"),   
        ("ken", "Û±§ò"),    
        ("kepeken", "Û±§ô"),
        ("kili", "Û±§ö"),   
        ("kiwen", "Û±§õ"),  
        ("ko", "Û±§ú"),
        ("kon", "Û±§ù"),
        ("kule", "Û±§û"),
        ("kulupu", "Û±§ü"),
        ("kute", "Û±§†"),
        ("la", "Û±§°"),
        ("lape", "Û±§¢"),
        ("laso", "Û±§£"),
        ("lawa", "Û±§§"),
        ("len", "Û±§•"),
        ("lete", "Û±§¶"),
        ("li", "Û±§ß"),
        ("lili", "Û±§®"),
        ("linja", "Û±§©"),
        ("lipu", "Û±§™"),
        ("loje", "Û±§´"),
        ("lon", "Û±§¨"),
        ("luka", "Û±§≠"),
        ("lukin", "Û±§Æ"),
        ("lupa", "Û±§Ø"),
        ("ma", "Û±§∞"),
        ("mama", "Û±§±"),
        ("mani", "Û±§≤"),
        ("meli", "Û±§≥"),
        ("mi", "Û±§¥"),
        ("mije", "Û±§µ"),
        ("moku", "Û±§∂"),
        ("moli", "Û±§∑"),
        ("monsi", "Û±§∏"),
        ("mu", "Û±§π"),
        ("mun", "Û±§∫"),
        ("musi", "Û±§ª"),
        ("mute", "Û±§º"),
        ("nanpa", "Û±§Ω"),
        ("nasa", "Û±§æ"),
        ("nasin", "Û±§ø"),
        ("nena", "Û±•Ä"),
        ("ni", "Û±•Å"),
        ("nimi", "Û±•Ç"),
        ("noka", "Û±•É"),
        ("o", "Û±•Ñ"),
        ("olin", "Û±•Ö"),
        ("ona", "Û±•Ü"),
        ("open", "Û±•á"),
        ("pakala", "Û±•à"),
        ("pali", "Û±•â"),
        ("palisa", "Û±•ä"),
        ("pan", "Û±•ã"),
        ("pana", "Û±•å"),
        ("pi", "Û±•ç"),
        ("pilin", "Û±•é"),
        ("pimeja", "Û±•è"),
        ("pini", "Û±•ê"),
        ("pipi", "Û±•ë"),
        ("poka", "Û±•í"),
        ("poki", "Û±•ì"),
        ("pona", "Û±•î"),
        ("pu", "Û±•ï"),
        ("sama", "Û±•ñ"),
        ("seli", "Û±•ó"),
        ("selo", "Û±•ò"),
        ("seme", "Û±•ô"),
        ("sewi", "Û±•ö"),
        ("sijelo", "Û±•õ"),
        ("sike", "Û±•ú"),
        ("sin", "Û±•ù"),
        ("sina", "Û±•û"),
        ("sinpin", "Û±•ü"),
        ("sitelen", "Û±•†"),
        ("sona", "Û±•°"),
        ("soweli", "Û±•¢"),
        ("suli", "Û±•£"),
        ("suno", "Û±•§"),
        ("supa", "Û±••"),
        ("suwi", "Û±•¶"),
        ("tan", "Û±•ß"),
        ("taso", "Û±•®"),
        ("tawa", "Û±•©"),
        ("telo", "Û±•™"),
        ("tenpo", "Û±•´"),
        ("toki", "Û±•¨"),
        ("tomo", "Û±•≠"),
        ("tu", "Û±•Æ"),
        ("unpa", "Û±•Ø"),
        ("uta", "Û±•∞"),
        ("utala", "Û±•±"),
        ("walo", "Û±•≤"),
        ("wan", "Û±•≥"),
        ("waso", "Û±•¥"),
        ("wawa", "Û±•µ"),
        ("weka", "Û±•∂"),
        ("wile", "Û±•∑"),
        ("namako", "Û±•∏"),
        ("kin", "Û±•π"),
        ("oko", "Û±•∫"),
        ("kipisi", "Û±•ª"),
        ("leko", "Û±•º"),
        ("monsuta", "Û±•Ω"),
        ("tonsi", "Û±•æ"),
        ("jasima", "Û±•ø"),
        ("kijetesantakalu", "Û±¶Ä"),
        ("soko", "Û±¶Å"),
        ("meso", "Û±¶Ç"),
        ("epiku", "Û±¶É"),
        ("kokosila", "Û±¶Ñ"),
        ("lanpan", "Û±¶Ö"),
        ("n", "Û±¶Ü"),
        ("misikeke", "Û±¶á"),
        ("ku", "Û±¶à"),
        ("pake", "Û±¶†"),
        ("apeja", "Û±¶°"),
        ("majuna", "Û±¶¢"),
        ("powe", "Û±¶£"),
    ]);

    let mut puncts = HashMap::new();
    puncts.insert('[', 'Û±¶ê');
    puncts.insert(']', 'Û±¶ë');
    puncts.insert('^', 'Û±¶ï');
    puncts.insert('*', 'Û±¶ñ');
    puncts.insert('(', 'Û±¶ó');
    puncts.insert(')', 'Û±¶ò');
    puncts.insert('{', 'Û±¶ö');
    puncts.insert('}', 'Û±¶õ');
    puncts.insert('.', 'Û±¶ú');
    puncts.insert(':', 'Û±¶ù');
    // non-UCSUR ones
    puncts.insert('<', '„Äå');
    puncts.insert('>', '„Äç');
    puncts.insert('-', '\u{200D}'); // ZWJ
    puncts.insert(' ', '\u{3000}'); // CJK space

    Schema {candis, puncts}
}


pub fn emoji() -> Schema {
    let candis = build_candis(vec![
        ("pona", "üòÄ")
    ]);
    let puncts = HashMap::new();
    Schema {candis, puncts}
}



